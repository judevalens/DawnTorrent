// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package torrent_state

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateServiceClient interface {
	AddTorrent(ctx context.Context, in *TorrentInfo, opts ...grpc.CallOption) (*TorrentState, error)
	RemoveTorrent(ctx context.Context, in *TorrentInfo, opts ...grpc.CallOption) (*TorrentState, error)
	ControlTorrent(ctx context.Context, in *Control, opts ...grpc.CallOption) (*TorrentState, error)
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (StateService_SubscribeClient, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) AddTorrent(ctx context.Context, in *TorrentInfo, opts ...grpc.CallOption) (*TorrentState, error) {
	out := new(TorrentState)
	err := c.cc.Invoke(ctx, "/StateService/AddTorrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) RemoveTorrent(ctx context.Context, in *TorrentInfo, opts ...grpc.CallOption) (*TorrentState, error) {
	out := new(TorrentState)
	err := c.cc.Invoke(ctx, "/StateService/RemoveTorrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) ControlTorrent(ctx context.Context, in *Control, opts ...grpc.CallOption) (*TorrentState, error) {
	out := new(TorrentState)
	err := c.cc.Invoke(ctx, "/StateService/ControlTorrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (StateService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateService_ServiceDesc.Streams[0], "/StateService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateService_SubscribeClient interface {
	Recv() (*TorrentState, error)
	grpc.ClientStream
}

type stateServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *stateServiceSubscribeClient) Recv() (*TorrentState, error) {
	m := new(TorrentState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateServiceServer is the server API for StateService service.
// All implementations must embed UnimplementedStateServiceServer
// for forward compatibility
type StateServiceServer interface {
	AddTorrent(context.Context, *TorrentInfo) (*TorrentState, error)
	RemoveTorrent(context.Context, *TorrentInfo) (*TorrentState, error)
	ControlTorrent(context.Context, *Control) (*TorrentState, error)
	Subscribe(*Subscription, StateService_SubscribeServer) error
	mustEmbedUnimplementedStateServiceServer()
}

// UnimplementedStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (UnimplementedStateServiceServer) AddTorrent(context.Context, *TorrentInfo) (*TorrentState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTorrent not implemented")
}
func (UnimplementedStateServiceServer) RemoveTorrent(context.Context, *TorrentInfo) (*TorrentState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTorrent not implemented")
}
func (UnimplementedStateServiceServer) ControlTorrent(context.Context, *Control) (*TorrentState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlTorrent not implemented")
}
func (UnimplementedStateServiceServer) Subscribe(*Subscription, StateService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStateServiceServer) mustEmbedUnimplementedStateServiceServer() {}

// UnsafeStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServiceServer will
// result in compilation errors.
type UnsafeStateServiceServer interface {
	mustEmbedUnimplementedStateServiceServer()
}

func RegisterStateServiceServer(s grpc.ServiceRegistrar, srv StateServiceServer) {
	s.RegisterService(&StateService_ServiceDesc, srv)
}

func _StateService_AddTorrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorrentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).AddTorrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateService/AddTorrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).AddTorrent(ctx, req.(*TorrentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_RemoveTorrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorrentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).RemoveTorrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateService/RemoveTorrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).RemoveTorrent(ctx, req.(*TorrentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_ControlTorrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Control)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).ControlTorrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StateService/ControlTorrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).ControlTorrent(ctx, req.(*Control))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServiceServer).Subscribe(m, &stateServiceSubscribeServer{stream})
}

type StateService_SubscribeServer interface {
	Send(*TorrentState) error
	grpc.ServerStream
}

type stateServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *stateServiceSubscribeServer) Send(m *TorrentState) error {
	return x.ServerStream.SendMsg(m)
}

// StateService_ServiceDesc is the grpc.ServiceDesc for StateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTorrent",
			Handler:    _StateService_AddTorrent_Handler,
		},
		{
			MethodName: "RemoveTorrent",
			Handler:    _StateService_RemoveTorrent_Handler,
		},
		{
			MethodName: "ControlTorrent",
			Handler:    _StateService_ControlTorrent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StateService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/torrent_state/torrent_state.proto",
}
