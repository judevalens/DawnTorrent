// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: rpc/torrent_state/torrent_state.proto

package torrent_state

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Control_Action int32

const (
	Control_START  Control_Action = 0
	Control_STOP   Control_Action = 1
	Control_Remove Control_Action = 2
	Control_Add    Control_Action = 3
)

// Enum value maps for Control_Action.
var (
	Control_Action_name = map[int32]string{
		0: "START",
		1: "STOP",
		2: "Remove",
		3: "Add",
	}
	Control_Action_value = map[string]int32{
		"START":  0,
		"STOP":   1,
		"Remove": 2,
		"Add":    3,
	}
)

func (x Control_Action) Enum() *Control_Action {
	p := new(Control_Action)
	*p = x
	return p
}

func (x Control_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Control_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_torrent_state_torrent_state_proto_enumTypes[0].Descriptor()
}

func (Control_Action) Type() protoreflect.EnumType {
	return &file_rpc_torrent_state_torrent_state_proto_enumTypes[0]
}

func (x Control_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Control_Action.Descriptor instead.
func (Control_Action) EnumDescriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{1, 0}
}

type TorrentInfoTorrentMode int32

const (
	TorrentInfo_Single   TorrentInfoTorrentMode = 0
	TorrentInfo_Multiple TorrentInfoTorrentMode = 1
)

// Enum value maps for TorrentInfoTorrentMode.
var (
	TorrentInfoTorrentMode_name = map[int32]string{
		0: "Single",
		1: "Multiple",
	}
	TorrentInfoTorrentMode_value = map[string]int32{
		"Single":   0,
		"Multiple": 1,
	}
)

func (x TorrentInfoTorrentMode) Enum() *TorrentInfoTorrentMode {
	p := new(TorrentInfoTorrentMode)
	*p = x
	return p
}

func (x TorrentInfoTorrentMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TorrentInfoTorrentMode) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_torrent_state_torrent_state_proto_enumTypes[1].Descriptor()
}

func (TorrentInfoTorrentMode) Type() protoreflect.EnumType {
	return &file_rpc_torrent_state_torrent_state_proto_enumTypes[1]
}

func (x TorrentInfoTorrentMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TorrentInfoTorrentMode.Descriptor instead.
func (TorrentInfoTorrentMode) EnumDescriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{2, 0}
}

type TorrentState_State int32

const (
	TorrentState_Stopped    TorrentState_State = 0
	TorrentState_InProgress TorrentState_State = 1
	TorrentState_Done       TorrentState_State = 2
)

// Enum value maps for TorrentState_State.
var (
	TorrentState_State_name = map[int32]string{
		0: "Stopped",
		1: "InProgress",
		2: "Done",
	}
	TorrentState_State_value = map[string]int32{
		"Stopped":    0,
		"InProgress": 1,
		"Done":       2,
	}
)

func (x TorrentState_State) Enum() *TorrentState_State {
	p := new(TorrentState_State)
	*p = x
	return p
}

func (x TorrentState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TorrentState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_torrent_state_torrent_state_proto_enumTypes[2].Descriptor()
}

func (TorrentState_State) Type() protoreflect.EnumType {
	return &file_rpc_torrent_state_torrent_state_proto_enumTypes[2]
}

func (x TorrentState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TorrentState_State.Descriptor instead.
func (TorrentState_State) EnumDescriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{4, 0}
}

type Ack_Code int32

const (
	Ack_Success Ack_Code = 0
	Ack_Failure Ack_Code = 1
)

// Enum value maps for Ack_Code.
var (
	Ack_Code_name = map[int32]string{
		0: "Success",
		1: "Failure",
	}
	Ack_Code_value = map[string]int32{
		"Success": 0,
		"Failure": 1,
	}
)

func (x Ack_Code) Enum() *Ack_Code {
	p := new(Ack_Code)
	*p = x
	return p
}

func (x Ack_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ack_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_torrent_state_torrent_state_proto_enumTypes[3].Descriptor()
}

func (Ack_Code) Type() protoreflect.EnumType {
	return &file_rpc_torrent_state_torrent_state_proto_enumTypes[3]
}

func (x Ack_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ack_Code.Descriptor instead.
func (Ack_Code) EnumDescriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{9, 0}
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{0}
}

type Control struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action   Control_Action `protobuf:"varint,1,opt,name=action,proto3,enum=Control_Action" json:"action,omitempty"`
	Infohash string         `protobuf:"bytes,2,opt,name=infohash,proto3" json:"infohash,omitempty"`
	Path     string         `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Control) Reset() {
	*x = Control{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Control) ProtoMessage() {}

func (x *Control) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Control.ProtoReflect.Descriptor instead.
func (*Control) Descriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{1}
}

func (x *Control) GetAction() Control_Action {
	if x != nil {
		return x.Action
	}
	return Control_START
}

func (x *Control) GetInfohash() string {
	if x != nil {
		return x.Infohash
	}
	return ""
}

func (x *Control) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TorrentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode          TorrentInfoTorrentMode `protobuf:"varint,6,opt,name=mode,proto3,enum=TorrentInfoTorrentMode" json:"mode,omitempty"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Infohash      string                 `protobuf:"bytes,2,opt,name=infohash,proto3" json:"infohash,omitempty"`
	TorrentLength int32                  `protobuf:"varint,3,opt,name=torrentLength,proto3" json:"torrentLength,omitempty"`
	Paths         []*FilePath            `protobuf:"bytes,7,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *TorrentInfo) Reset() {
	*x = TorrentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TorrentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TorrentInfo) ProtoMessage() {}

func (x *TorrentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TorrentInfo.ProtoReflect.Descriptor instead.
func (*TorrentInfo) Descriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{2}
}

func (x *TorrentInfo) GetMode() TorrentInfoTorrentMode {
	if x != nil {
		return x.Mode
	}
	return TorrentInfo_Single
}

func (x *TorrentInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TorrentInfo) GetInfohash() string {
	if x != nil {
		return x.Infohash
	}
	return ""
}

func (x *TorrentInfo) GetTorrentLength() int32 {
	if x != nil {
		return x.TorrentLength
	}
	return 0
}

func (x *TorrentInfo) GetPaths() []*FilePath {
	if x != nil {
		return x.Paths
	}
	return nil
}

type FilePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length int32  `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FilePath) Reset() {
	*x = FilePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePath) ProtoMessage() {}

func (x *FilePath) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePath.ProtoReflect.Descriptor instead.
func (*FilePath) Descriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{3}
}

func (x *FilePath) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *FilePath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TorrentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TorrentState TorrentState_State `protobuf:"varint,1,opt,name=torrentState,proto3,enum=TorrentState_State" json:"torrentState,omitempty"`
	Stats        *Stats             `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	Infohash     string             `protobuf:"bytes,2,opt,name=infohash,proto3" json:"infohash,omitempty"`
	Torrent      *TorrentInfo       `protobuf:"bytes,3,opt,name=torrent,proto3" json:"torrent,omitempty"`
	Trackers     []*Tracker         `protobuf:"bytes,4,rep,name=trackers,proto3" json:"trackers,omitempty"`
	PeerSwarm    *PeerSwarm         `protobuf:"bytes,5,opt,name=peerSwarm,proto3" json:"peerSwarm,omitempty"`
}

func (x *TorrentState) Reset() {
	*x = TorrentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TorrentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TorrentState) ProtoMessage() {}

func (x *TorrentState) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TorrentState.ProtoReflect.Descriptor instead.
func (*TorrentState) Descriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{4}
}

func (x *TorrentState) GetTorrentState() TorrentState_State {
	if x != nil {
		return x.TorrentState
	}
	return TorrentState_Stopped
}

func (x *TorrentState) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *TorrentState) GetInfohash() string {
	if x != nil {
		return x.Infohash
	}
	return ""
}

func (x *TorrentState) GetTorrent() *TorrentInfo {
	if x != nil {
		return x.Torrent
	}
	return nil
}

func (x *TorrentState) GetTrackers() []*Tracker {
	if x != nil {
		return x.Trackers
	}
	return nil
}

func (x *TorrentState) GetPeerSwarm() *PeerSwarm {
	if x != nil {
		return x.PeerSwarm
	}
	return nil
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bitfield      []byte  `protobuf:"bytes,4,opt,name=bitfield,proto3" json:"bitfield,omitempty"`
	TorrentLength int32   `protobuf:"varint,3,opt,name=torrentLength,proto3" json:"torrentLength,omitempty"`
	CurrentLength int32   `protobuf:"varint,5,opt,name=currentLength,proto3" json:"currentLength,omitempty"`
	DownloadRate  float64 `protobuf:"fixed64,6,opt,name=downloadRate,proto3" json:"downloadRate,omitempty"`
	UploadRate    float64 `protobuf:"fixed64,7,opt,name=uploadRate,proto3" json:"uploadRate,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{5}
}

func (x *Stats) GetBitfield() []byte {
	if x != nil {
		return x.Bitfield
	}
	return nil
}

func (x *Stats) GetTorrentLength() int32 {
	if x != nil {
		return x.TorrentLength
	}
	return 0
}

func (x *Stats) GetCurrentLength() int32 {
	if x != nil {
		return x.CurrentLength
	}
	return 0
}

func (x *Stats) GetDownloadRate() float64 {
	if x != nil {
		return x.DownloadRate
	}
	return 0
}

func (x *Stats) GetUploadRate() float64 {
	if x != nil {
		return x.UploadRate
	}
	return 0
}

type Tracker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *Tracker) Reset() {
	*x = Tracker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracker) ProtoMessage() {}

func (x *Tracker) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracker.ProtoReflect.Descriptor instead.
func (*Tracker) Descriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{6}
}

func (x *Tracker) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type PeerSwarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NConnectedPeer int32   `protobuf:"varint,1,opt,name=nConnectedPeer,proto3" json:"nConnectedPeer,omitempty"`
	Peers          []*Peer `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *PeerSwarm) Reset() {
	*x = PeerSwarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerSwarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerSwarm) ProtoMessage() {}

func (x *PeerSwarm) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerSwarm.ProtoReflect.Descriptor instead.
func (*PeerSwarm) Descriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{7}
}

func (x *PeerSwarm) GetNConnectedPeer() int32 {
	if x != nil {
		return x.NConnectedPeer
	}
	return 0
}

func (x *PeerSwarm) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip           string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Id           string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	UploadRate   int32  `protobuf:"varint,3,opt,name=uploadRate,proto3" json:"uploadRate,omitempty"`
	DownloadRate int32  `protobuf:"varint,4,opt,name=downloadRate,proto3" json:"downloadRate,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{8}
}

func (x *Peer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Peer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Peer) GetUploadRate() int32 {
	if x != nil {
		return x.UploadRate
	}
	return 0
}

func (x *Peer) GetDownloadRate() int32 {
	if x != nil {
		return x.DownloadRate
	}
	return 0
}

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_torrent_state_torrent_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_rpc_torrent_state_torrent_state_proto_rawDescGZIP(), []int{9}
}

func (x *Ack) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_rpc_torrent_state_torrent_state_proto protoreflect.FileDescriptor

var file_rpc_torrent_state_torrent_state_proto_rawDesc = []byte{
	0x0a, 0x25, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x32, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x03,
	0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x74, 0x6f, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x27, 0x0a, 0x0b, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x10, 0x01, 0x22, 0x36,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x54, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x07, 0x74, 0x6f,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x6f,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x53, 0x77, 0x61, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x53, 0x77, 0x61,
	0x72, 0x6d, 0x22, 0x2e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65,
	0x10, 0x02, 0x22, 0xb3, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x62, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x22, 0x50, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x53, 0x77, 0x61, 0x72, 0x6d,
	0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x6a, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x22, 0x3b, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x20, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x01, 0x32, 0xbf,
	0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x2e,
	0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x54, 0x6f,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x0d, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x54, 0x6f,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x54, 0x6f, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x08, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x0d, 0x2e, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x0d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0d, 0x2e, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x30, 0x01,
	0x42, 0x10, 0x5a, 0x0e, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_torrent_state_torrent_state_proto_rawDescOnce sync.Once
	file_rpc_torrent_state_torrent_state_proto_rawDescData = file_rpc_torrent_state_torrent_state_proto_rawDesc
)

func file_rpc_torrent_state_torrent_state_proto_rawDescGZIP() []byte {
	file_rpc_torrent_state_torrent_state_proto_rawDescOnce.Do(func() {
		file_rpc_torrent_state_torrent_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_torrent_state_torrent_state_proto_rawDescData)
	})
	return file_rpc_torrent_state_torrent_state_proto_rawDescData
}

var file_rpc_torrent_state_torrent_state_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_rpc_torrent_state_torrent_state_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_rpc_torrent_state_torrent_state_proto_goTypes = []interface{}{
	(Control_Action)(0),         // 0: Control.Action
	(TorrentInfoTorrentMode)(0), // 1: TorrentInfo.torrentMode
	(TorrentState_State)(0),     // 2: TorrentState.State
	(Ack_Code)(0),               // 3: Ack.Code
	(*Subscription)(nil),        // 4: Subscription
	(*Control)(nil),             // 5: Control
	(*TorrentInfo)(nil),         // 6: TorrentInfo
	(*FilePath)(nil),            // 7: FilePath
	(*TorrentState)(nil),        // 8: TorrentState
	(*Stats)(nil),               // 9: Stats
	(*Tracker)(nil),             // 10: Tracker
	(*PeerSwarm)(nil),           // 11: PeerSwarm
	(*Peer)(nil),                // 12: Peer
	(*Ack)(nil),                 // 13: Ack
}
var file_rpc_torrent_state_torrent_state_proto_depIdxs = []int32{
	0,  // 0: Control.action:type_name -> Control.Action
	1,  // 1: TorrentInfo.mode:type_name -> TorrentInfo.torrentMode
	7,  // 2: TorrentInfo.paths:type_name -> FilePath
	2,  // 3: TorrentState.torrentState:type_name -> TorrentState.State
	9,  // 4: TorrentState.stats:type_name -> Stats
	6,  // 5: TorrentState.torrent:type_name -> TorrentInfo
	10, // 6: TorrentState.trackers:type_name -> Tracker
	11, // 7: TorrentState.peerSwarm:type_name -> PeerSwarm
	12, // 8: PeerSwarm.peers:type_name -> Peer
	6,  // 9: StateService.AddTorrent:input_type -> TorrentInfo
	6,  // 10: StateService.RemoveTorrent:input_type -> TorrentInfo
	5,  // 11: StateService.ControlTorrent:input_type -> Control
	4,  // 12: StateService.Subscribe:input_type -> Subscription
	8,  // 13: StateService.AddTorrent:output_type -> TorrentState
	8,  // 14: StateService.RemoveTorrent:output_type -> TorrentState
	8,  // 15: StateService.ControlTorrent:output_type -> TorrentState
	8,  // 16: StateService.Subscribe:output_type -> TorrentState
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_rpc_torrent_state_torrent_state_proto_init() }
func file_rpc_torrent_state_torrent_state_proto_init() {
	if File_rpc_torrent_state_torrent_state_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_torrent_state_torrent_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_torrent_state_torrent_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Control); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_torrent_state_torrent_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TorrentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_torrent_state_torrent_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_torrent_state_torrent_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TorrentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_torrent_state_torrent_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_torrent_state_torrent_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_torrent_state_torrent_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerSwarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_torrent_state_torrent_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_torrent_state_torrent_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_torrent_state_torrent_state_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_torrent_state_torrent_state_proto_goTypes,
		DependencyIndexes: file_rpc_torrent_state_torrent_state_proto_depIdxs,
		EnumInfos:         file_rpc_torrent_state_torrent_state_proto_enumTypes,
		MessageInfos:      file_rpc_torrent_state_torrent_state_proto_msgTypes,
	}.Build()
	File_rpc_torrent_state_torrent_state_proto = out.File
	file_rpc_torrent_state_torrent_state_proto_rawDesc = nil
	file_rpc_torrent_state_torrent_state_proto_goTypes = nil
	file_rpc_torrent_state_torrent_state_proto_depIdxs = nil
}
